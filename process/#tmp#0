(in-package mail-process)

(defun check-mail-pop3 (mailbox)
  (with-slots (host user pass) mailbox
    (mail-base:with-pop3-mailbox (host user pass)
      (loop for msgnum from 1 to .message-count.
	    as message = (mail-base:retrieve-message msgnum)
	    when (and message (process-message message))
	      do (mail-base:delete-message msgnum)))))

(defun check-mail-mbox (mbox-file)
  (with-open-file (m mbox-file :direction :input)
    (loop with msg = nil
	  with endp = nil
	  do (multiple-value-setq (msg endp) (mail-base::read-mbox-message m))
	  until endp
	  do (and msg (process-message msg)))))

(defun create-message (archive-message rfc2822-message)
  (let* ((message-id-header (message-message-id))
 	 (message-id (mail-store:create-message-id (if message-id-header 
						       message-id-header
						       (next-locally-assigned-message-id-header))))
	 (references-list (message-references rfc2822-message))
	 (in-reply-to (message-in-reply-to rfc2822-message))
	 (from-email-address (apply #'mail-store:create-email-address (message-from-address rfc2822-message)))
	 (to-email-address (apply #'mail-store:create-email-address (message-to-address rfc2822-message)))
	 (message (mail-store:store-message :archive-message-ptr (db-base:id archive-message)
					    :message-id-ptr (db-base:id message-id)
					    :header-subject (message-subject rfc2822-message)
					    :header-date (message-date rfc2822-message)
					    :date (universal-time->local-time (message-date-ut rfc2822-message))
					    :from-ptr (db-base:id from-email-address)
					    :to-ptr (db-base:id to-email-address)
					    :status "INITIAL"
					    :flags "unseen")))
    (setf (mail-store:message-id-message-ptr message-id) (db-base:id message))
    (dolist (r (remove-duplicates (append references-list in-reply-to) :test #'string=))
      (when r
	(mail-store:create-message-reference message (create-message-id r message)))) ; find or create
    message))

;;; read in a message, store it to mail archive, parse it, store it to main db, categorize it, and if applicable update database tables with changes

(defun process-message (message-text)
  (let* ((archive (mail-store:archive-message message-text))
	 (parsed (rfc2822-parser:make-rfc2822-message (mail-store:archive-message-headers archive)
						      (mail-store:archive-message-body archive)))
	 (msg (create-message archive parsed)))
    (categorize-message msg parsed)
;    (apply-updates parsed))
    t))




;(check-mail-mbox "z:/devo/data/bookmail3")
